
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftANDleftORleftEQUALSMORELESSleftPLUSMINUSleftMULTIPLYDIVIDEAND ANYTHING ARRAY ASSIGNMENT BLOCK_CLOSE BLOCK_OPEN BOOL BOOL_TYPE CLOSE_COMMENT CLOSE_ROUND_BKT CLOSE_SQUARE_BKT COLON COMMA DIVIDE DO DOT ELSE END_LINE EQUALS FLOAT FLOAT_TYPE FOR FUNC_DEF IF INT INT_TYPE LESS MINUS MORE MULTIPLY NAME NONE_TYPE OF OPEN_COMMENT OPEN_ROUND_BKT OPEN_SQUARE_BKT OR PLUS PROGBEGIN READLN REPEAT RETURN STRING STRING_TYPE THEN TO UNTIL VAR_DEF WHILE WRITELN\n    start : PROGBEGIN state_list DOT\n          | PROGBEGIN NAME state_list DOT\n    \n    state_list : BLOCK_OPEN state END_LINE state_list BLOCK_CLOSE\n               | BLOCK_OPEN state END_LINE BLOCK_CLOSE\n    \n    state_list : state END_LINE state_list\n               | state END_LINE\n    \n    state_body : BLOCK_OPEN state_list BLOCK_CLOSE\n               | state\n    \n    state : IF expression THEN state_body\n          | IF expression THEN state_body ELSE state_body\n    \n    state : FOR NAME ASSIGNMENT expression TO expression DO state_body\n    \n    state : WHILE expression DO state_body\n    \n    state : FUNC_DEF NAME OPEN_ROUND_BKT argument_list CLOSE_ROUND_BKT COLON var_type END_LINE BLOCK_OPEN state_list BLOCK_CLOSE\n          | FUNC_DEF NAME OPEN_ROUND_BKT argument_list CLOSE_ROUND_BKT COLON NONE_TYPE END_LINE BLOCK_OPEN state_list BLOCK_CLOSE\n    \n    argument_list : NAME COLON var_type COMMA argument_list\n                  | NAME COLON var_type\n                  | NAME COLON ARRAY OPEN_SQUARE_BKT INT DOT DOT INT CLOSE_SQUARE_BKT OF var_type COMMA argument_list\n                  | NAME COLON ARRAY OPEN_SQUARE_BKT INT DOT DOT INT CLOSE_SQUARE_BKT OF var_type\n                  | empty\n    \n    state : RETURN expression\n    \n    state : VAR_DEF NAME COLON var_type\n    state_var_def : VAR_DEF NAME COLON var_type\n    \n    state : VAR_DEF NAME COLON ARRAY OPEN_SQUARE_BKT INT DOT DOT INT CLOSE_SQUARE_BKT OF var_type\n    state_array_def : VAR_DEF NAME COLON ARRAY OPEN_SQUARE_BKT INT DOT DOT INT CLOSE_SQUARE_BKT OF var_type\n    \n    state : WRITELN OPEN_ROUND_BKT expression CLOSE_ROUND_BKT\n    \n    state : READLN OPEN_ROUND_BKT NAME CLOSE_ROUND_BKT\n    \n    state : expression_name ASSIGNMENT expression\n          | expression_array_call ASSIGNMENT expression\n    \n    state : state_var_def ASSIGNMENT expression\n          | state_array_def ASSIGNMENT OPEN_ROUND_BKT expr_list CLOSE_ROUND_BKT\n          | expression_name ASSIGNMENT OPEN_ROUND_BKT expr_list CLOSE_ROUND_BKT\n    \n    state : expression\n    \n    expr_list : expression COMMA expr_list\n              | expression\n    \n    expr_list : empty\n    \n    expression : NAME OPEN_ROUND_BKT expr_list CLOSE_ROUND_BKT\n    \n    expression : NAME OPEN_SQUARE_BKT expression CLOSE_SQUARE_BKT\n    expression_array_call : NAME OPEN_SQUARE_BKT expression CLOSE_SQUARE_BKT\n    \n    expression : expression MULTIPLY expression\n               | expression DIVIDE expression\n               | expression PLUS expression\n               | expression MINUS expression\n    \n    expression : expression EQUALS expression\n               | expression MORE expression\n               | expression LESS expression\n               | expression AND expression\n               | expression OR expression\n    \n    expression : INT\n    \n    expression : FLOAT\n    \n    expression : BOOL\n    \n    expression : STRING\n    \n    expression : NAME\n    expression_name : NAME\n    \n    var_type : FLOAT_TYPE\n             | INT_TYPE\n             | STRING_TYPE\n             | BOOL_TYPE\n    \n    empty :\n    '
    
_lr_action_items = {'PROGBEGIN':([0,],[2,]),'$end':([1,24,53,],[0,-1,-2,]),'NAME':([2,4,5,7,9,10,11,12,13,27,28,30,33,34,35,36,37,38,39,40,41,47,48,49,50,51,58,60,61,71,72,73,78,81,84,88,108,111,124,125,137,138,152,],[4,25,25,32,42,32,44,32,46,32,32,25,32,32,32,32,32,32,32,32,32,32,76,32,32,32,25,25,32,32,25,93,32,32,32,25,25,32,25,93,25,25,93,]),'BLOCK_OPEN':([2,4,30,58,60,72,88,108,124,133,134,137,138,],[5,5,5,5,88,88,5,88,88,137,138,5,5,]),'IF':([2,4,5,30,58,60,72,88,108,124,137,138,],[7,7,7,7,7,7,7,7,7,7,7,7,]),'FOR':([2,4,5,30,58,60,72,88,108,124,137,138,],[9,9,9,9,9,9,9,9,9,9,9,9,]),'WHILE':([2,4,5,30,58,60,72,88,108,124,137,138,],[10,10,10,10,10,10,10,10,10,10,10,10,]),'FUNC_DEF':([2,4,5,30,58,60,72,88,108,124,137,138,],[11,11,11,11,11,11,11,11,11,11,11,11,]),'RETURN':([2,4,5,30,58,60,72,88,108,124,137,138,],[12,12,12,12,12,12,12,12,12,12,12,12,]),'VAR_DEF':([2,4,5,30,58,60,72,88,108,124,137,138,],[13,13,13,13,13,13,13,13,13,13,13,13,]),'WRITELN':([2,4,5,30,58,60,72,88,108,124,137,138,],[15,15,15,15,15,15,15,15,15,15,15,15,]),'READLN':([2,4,5,30,58,60,72,88,108,124,137,138,],[16,16,16,16,16,16,16,16,16,16,16,16,]),'INT':([2,4,5,7,10,12,27,28,30,33,34,35,36,37,38,39,40,41,47,49,50,51,58,60,61,71,72,78,81,84,88,108,111,114,124,126,135,137,138,140,],[14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,123,14,132,139,14,14,144,]),'FLOAT':([2,4,5,7,10,12,27,28,30,33,34,35,36,37,38,39,40,41,47,49,50,51,58,60,61,71,72,78,81,84,88,108,111,124,137,138,],[21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,]),'BOOL':([2,4,5,7,10,12,27,28,30,33,34,35,36,37,38,39,40,41,47,49,50,51,58,60,61,71,72,78,81,84,88,108,111,124,137,138,],[22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,]),'STRING':([2,4,5,7,10,12,27,28,30,33,34,35,36,37,38,39,40,41,47,49,50,51,58,60,61,71,72,78,81,84,88,108,111,124,137,138,],[23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,]),'DOT':([3,26,30,59,86,107,123,129,132,136,],[24,53,-6,-5,-4,-3,129,135,136,140,]),'ASSIGNMENT':([4,17,18,19,20,25,42,82,96,98,99,100,101,149,],[-53,49,50,51,52,-53,71,-38,-22,-54,-55,-56,-57,-24,]),'OPEN_SQUARE_BKT':([4,25,32,97,121,],[27,27,61,114,126,]),'OPEN_ROUND_BKT':([4,15,16,25,32,44,49,52,],[28,47,48,28,28,73,78,81,]),'MULTIPLY':([4,8,14,21,22,23,25,31,32,43,45,54,56,62,63,64,65,66,67,68,69,70,75,77,79,80,82,83,90,91,110,119,],[-52,33,-48,-49,-50,-51,-52,33,-52,33,33,33,33,-39,-40,33,33,33,33,33,33,33,33,33,33,33,-37,-36,33,33,-37,33,]),'DIVIDE':([4,8,14,21,22,23,25,31,32,43,45,54,56,62,63,64,65,66,67,68,69,70,75,77,79,80,82,83,90,91,110,119,],[-52,34,-48,-49,-50,-51,-52,34,-52,34,34,34,34,-39,-40,34,34,34,34,34,34,34,34,34,34,34,-37,-36,34,34,-37,34,]),'PLUS':([4,8,14,21,22,23,25,31,32,43,45,54,56,62,63,64,65,66,67,68,69,70,75,77,79,80,82,83,90,91,110,119,],[-52,35,-48,-49,-50,-51,-52,35,-52,35,35,35,35,-39,-40,-41,-42,35,35,35,35,35,35,35,35,35,-37,-36,35,35,-37,35,]),'MINUS':([4,8,14,21,22,23,25,31,32,43,45,54,56,62,63,64,65,66,67,68,69,70,75,77,79,80,82,83,90,91,110,119,],[-52,36,-48,-49,-50,-51,-52,36,-52,36,36,36,36,-39,-40,-41,-42,36,36,36,36,36,36,36,36,36,-37,-36,36,36,-37,36,]),'EQUALS':([4,8,14,21,22,23,25,31,32,43,45,54,56,62,63,64,65,66,67,68,69,70,75,77,79,80,82,83,90,91,110,119,],[-52,37,-48,-49,-50,-51,-52,37,-52,37,37,37,37,-39,-40,-41,-42,-43,-44,-45,37,37,37,37,37,37,-37,-36,37,37,-37,37,]),'MORE':([4,8,14,21,22,23,25,31,32,43,45,54,56,62,63,64,65,66,67,68,69,70,75,77,79,80,82,83,90,91,110,119,],[-52,38,-48,-49,-50,-51,-52,38,-52,38,38,38,38,-39,-40,-41,-42,-43,-44,-45,38,38,38,38,38,38,-37,-36,38,38,-37,38,]),'LESS':([4,8,14,21,22,23,25,31,32,43,45,54,56,62,63,64,65,66,67,68,69,70,75,77,79,80,82,83,90,91,110,119,],[-52,39,-48,-49,-50,-51,-52,39,-52,39,39,39,39,-39,-40,-41,-42,-43,-44,-45,39,39,39,39,39,39,-37,-36,39,39,-37,39,]),'AND':([4,8,14,21,22,23,25,31,32,43,45,54,56,62,63,64,65,66,67,68,69,70,75,77,79,80,82,83,90,91,110,119,],[-52,40,-48,-49,-50,-51,-52,40,-52,40,40,40,40,-39,-40,-41,-42,-43,-44,-45,-46,-47,40,40,40,40,-37,-36,40,40,-37,40,]),'OR':([4,8,14,21,22,23,25,31,32,43,45,54,56,62,63,64,65,66,67,68,69,70,75,77,79,80,82,83,90,91,110,119,],[-52,41,-48,-49,-50,-51,-52,41,-52,41,41,41,41,-39,-40,-41,-42,-43,-44,-45,41,-47,41,41,41,41,-37,-36,41,41,-37,41,]),'END_LINE':([4,6,8,14,21,22,23,25,29,32,45,62,63,64,65,66,67,68,69,70,77,79,80,82,83,87,89,92,96,98,99,100,101,102,103,110,115,116,117,118,127,128,130,145,146,149,],[-52,30,-32,-48,-49,-50,-51,-52,58,-52,-20,-39,-40,-41,-42,-43,-44,-45,-46,-47,-27,-28,-29,-37,-36,-9,-8,-12,-21,-54,-55,-56,-57,-25,-26,-37,-31,-30,-10,-7,133,134,-11,-13,-14,-23,]),'ELSE':([8,14,21,22,23,25,32,45,62,63,64,65,66,67,68,69,70,77,79,80,82,83,87,89,92,96,98,99,100,101,102,103,110,115,116,117,118,130,145,146,149,],[-32,-48,-49,-50,-51,-52,-52,-20,-39,-40,-41,-42,-43,-44,-45,-46,-47,-27,-28,-29,-37,-36,108,-8,-12,-21,-54,-55,-56,-57,-25,-26,-37,-31,-30,-10,-7,-11,-13,-14,-23,]),'THEN':([14,21,22,23,31,32,62,63,64,65,66,67,68,69,70,83,110,],[-48,-49,-50,-51,60,-52,-39,-40,-41,-42,-43,-44,-45,-46,-47,-36,-37,]),'DO':([14,21,22,23,32,43,62,63,64,65,66,67,68,69,70,83,110,119,],[-48,-49,-50,-51,-52,72,-39,-40,-41,-42,-43,-44,-45,-46,-47,-36,-37,124,]),'CLOSE_SQUARE_BKT':([14,21,22,23,32,54,62,63,64,65,66,67,68,69,70,83,90,110,139,144,],[-48,-49,-50,-51,-52,82,-39,-40,-41,-42,-43,-44,-45,-46,-47,-36,110,-37,143,148,]),'COMMA':([14,21,22,23,32,56,62,63,64,65,66,67,68,69,70,83,98,99,100,101,110,120,151,],[-48,-49,-50,-51,-52,84,-39,-40,-41,-42,-43,-44,-45,-46,-47,-36,-54,-55,-56,-57,-37,125,152,]),'CLOSE_ROUND_BKT':([14,21,22,23,28,32,55,56,57,62,63,64,65,66,67,68,69,70,73,75,76,78,81,83,84,94,95,98,99,100,101,104,105,106,110,120,125,131,151,152,153,],[-48,-49,-50,-51,-58,-52,83,-34,-35,-39,-40,-41,-42,-43,-44,-45,-46,-47,-58,102,103,-58,-58,-36,-58,113,-19,-54,-55,-56,-57,115,116,-33,-37,-16,-58,-15,-18,-58,-17,]),'TO':([14,21,22,23,32,62,63,64,65,66,67,68,69,70,83,91,110,],[-48,-49,-50,-51,-52,-39,-40,-41,-42,-43,-44,-45,-46,-47,-36,111,-37,]),'BLOCK_CLOSE':([30,58,59,85,86,107,109,141,142,],[-6,86,-5,107,-4,-3,118,145,146,]),'COLON':([46,93,113,],[74,112,122,]),'ARRAY':([74,112,],[97,121,]),'FLOAT_TYPE':([74,112,122,147,150,],[98,98,98,98,98,]),'INT_TYPE':([74,112,122,147,150,],[99,99,99,99,99,]),'STRING_TYPE':([74,112,122,147,150,],[100,100,100,100,100,]),'BOOL_TYPE':([74,112,122,147,150,],[101,101,101,101,101,]),'NONE_TYPE':([122,],[128,]),'OF':([143,148,],[147,150,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'start':([0,],[1,]),'state_list':([2,4,30,58,88,137,138,],[3,26,59,85,109,141,142,]),'state':([2,4,5,30,58,60,72,88,108,124,137,138,],[6,6,29,6,6,89,89,6,89,89,6,6,]),'expression':([2,4,5,7,10,12,27,28,30,33,34,35,36,37,38,39,40,41,47,49,50,51,58,60,61,71,72,78,81,84,88,108,111,124,137,138,],[8,8,8,31,43,45,54,56,8,62,63,64,65,66,67,68,69,70,75,77,79,80,8,8,90,91,8,56,56,56,8,8,119,8,8,8,]),'expression_name':([2,4,5,30,58,60,72,88,108,124,137,138,],[17,17,17,17,17,17,17,17,17,17,17,17,]),'expression_array_call':([2,4,5,30,58,60,72,88,108,124,137,138,],[18,18,18,18,18,18,18,18,18,18,18,18,]),'state_var_def':([2,4,5,30,58,60,72,88,108,124,137,138,],[19,19,19,19,19,19,19,19,19,19,19,19,]),'state_array_def':([2,4,5,30,58,60,72,88,108,124,137,138,],[20,20,20,20,20,20,20,20,20,20,20,20,]),'expr_list':([28,78,81,84,],[55,104,105,106,]),'empty':([28,73,78,81,84,125,152,],[57,95,57,57,57,95,95,]),'state_body':([60,72,108,124,],[87,92,117,130,]),'argument_list':([73,125,152,],[94,131,153,]),'var_type':([74,112,122,147,150,],[96,120,127,149,151,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> start","S'",1,None,None,None),
  ('start -> PROGBEGIN state_list DOT','start',3,'p_start','mel_parser.py',272),
  ('start -> PROGBEGIN NAME state_list DOT','start',4,'p_start','mel_parser.py',273),
  ('state_list -> BLOCK_OPEN state END_LINE state_list BLOCK_CLOSE','state_list',5,'p_state_list_begin','mel_parser.py',288),
  ('state_list -> BLOCK_OPEN state END_LINE BLOCK_CLOSE','state_list',4,'p_state_list_begin','mel_parser.py',289),
  ('state_list -> state END_LINE state_list','state_list',3,'p_state_list','mel_parser.py',298),
  ('state_list -> state END_LINE','state_list',2,'p_state_list','mel_parser.py',299),
  ('state_body -> BLOCK_OPEN state_list BLOCK_CLOSE','state_body',3,'p_state_body','mel_parser.py',308),
  ('state_body -> state','state_body',1,'p_state_body','mel_parser.py',309),
  ('state -> IF expression THEN state_body','state',4,'p_state_if','mel_parser.py',319),
  ('state -> IF expression THEN state_body ELSE state_body','state',6,'p_state_if','mel_parser.py',320),
  ('state -> FOR NAME ASSIGNMENT expression TO expression DO state_body','state',8,'p_state_for','mel_parser.py',330),
  ('state -> WHILE expression DO state_body','state',4,'p_state_while','mel_parser.py',336),
  ('state -> FUNC_DEF NAME OPEN_ROUND_BKT argument_list CLOSE_ROUND_BKT COLON var_type END_LINE BLOCK_OPEN state_list BLOCK_CLOSE','state',11,'p_state_func_def','mel_parser.py',342),
  ('state -> FUNC_DEF NAME OPEN_ROUND_BKT argument_list CLOSE_ROUND_BKT COLON NONE_TYPE END_LINE BLOCK_OPEN state_list BLOCK_CLOSE','state',11,'p_state_func_def','mel_parser.py',343),
  ('argument_list -> NAME COLON var_type COMMA argument_list','argument_list',5,'p_argument_list','mel_parser.py',349),
  ('argument_list -> NAME COLON var_type','argument_list',3,'p_argument_list','mel_parser.py',350),
  ('argument_list -> NAME COLON ARRAY OPEN_SQUARE_BKT INT DOT DOT INT CLOSE_SQUARE_BKT OF var_type COMMA argument_list','argument_list',13,'p_argument_list','mel_parser.py',351),
  ('argument_list -> NAME COLON ARRAY OPEN_SQUARE_BKT INT DOT DOT INT CLOSE_SQUARE_BKT OF var_type','argument_list',11,'p_argument_list','mel_parser.py',352),
  ('argument_list -> empty','argument_list',1,'p_argument_list','mel_parser.py',353),
  ('state -> RETURN expression','state',2,'p_state_return','mel_parser.py',366),
  ('state -> VAR_DEF NAME COLON var_type','state',4,'p_state_var_def','mel_parser.py',372),
  ('state_var_def -> VAR_DEF NAME COLON var_type','state_var_def',4,'p_state_var_def','mel_parser.py',373),
  ('state -> VAR_DEF NAME COLON ARRAY OPEN_SQUARE_BKT INT DOT DOT INT CLOSE_SQUARE_BKT OF var_type','state',12,'p_state_array_def','mel_parser.py',379),
  ('state_array_def -> VAR_DEF NAME COLON ARRAY OPEN_SQUARE_BKT INT DOT DOT INT CLOSE_SQUARE_BKT OF var_type','state_array_def',12,'p_state_array_def','mel_parser.py',380),
  ('state -> WRITELN OPEN_ROUND_BKT expression CLOSE_ROUND_BKT','state',4,'p_state_writeln','mel_parser.py',391),
  ('state -> READLN OPEN_ROUND_BKT NAME CLOSE_ROUND_BKT','state',4,'p_state_readln','mel_parser.py',397),
  ('state -> expression_name ASSIGNMENT expression','state',3,'p_state_var_assign','mel_parser.py',403),
  ('state -> expression_array_call ASSIGNMENT expression','state',3,'p_state_var_assign','mel_parser.py',404),
  ('state -> state_var_def ASSIGNMENT expression','state',3,'p_state_var_assign_def','mel_parser.py',411),
  ('state -> state_array_def ASSIGNMENT OPEN_ROUND_BKT expr_list CLOSE_ROUND_BKT','state',5,'p_state_var_assign_def','mel_parser.py',412),
  ('state -> expression_name ASSIGNMENT OPEN_ROUND_BKT expr_list CLOSE_ROUND_BKT','state',5,'p_state_var_assign_def','mel_parser.py',413),
  ('state -> expression','state',1,'p_state_expression','mel_parser.py',422),
  ('expr_list -> expression COMMA expr_list','expr_list',3,'p_expr_list','mel_parser.py',428),
  ('expr_list -> expression','expr_list',1,'p_expr_list','mel_parser.py',429),
  ('expr_list -> empty','expr_list',1,'p_expr_list_empty','mel_parser.py',438),
  ('expression -> NAME OPEN_ROUND_BKT expr_list CLOSE_ROUND_BKT','expression',4,'p_expression_func_call','mel_parser.py',443),
  ('expression -> NAME OPEN_SQUARE_BKT expression CLOSE_SQUARE_BKT','expression',4,'p_expression_array_call','mel_parser.py',449),
  ('expression_array_call -> NAME OPEN_SQUARE_BKT expression CLOSE_SQUARE_BKT','expression_array_call',4,'p_expression_array_call','mel_parser.py',450),
  ('expression -> expression MULTIPLY expression','expression',3,'p_expression_math','mel_parser.py',456),
  ('expression -> expression DIVIDE expression','expression',3,'p_expression_math','mel_parser.py',457),
  ('expression -> expression PLUS expression','expression',3,'p_expression_math','mel_parser.py',458),
  ('expression -> expression MINUS expression','expression',3,'p_expression_math','mel_parser.py',459),
  ('expression -> expression EQUALS expression','expression',3,'p_expression_logic','mel_parser.py',465),
  ('expression -> expression MORE expression','expression',3,'p_expression_logic','mel_parser.py',466),
  ('expression -> expression LESS expression','expression',3,'p_expression_logic','mel_parser.py',467),
  ('expression -> expression AND expression','expression',3,'p_expression_logic','mel_parser.py',468),
  ('expression -> expression OR expression','expression',3,'p_expression_logic','mel_parser.py',469),
  ('expression -> INT','expression',1,'p_expression_int','mel_parser.py',475),
  ('expression -> FLOAT','expression',1,'p_expression_float','mel_parser.py',481),
  ('expression -> BOOL','expression',1,'p_expression_bool','mel_parser.py',487),
  ('expression -> STRING','expression',1,'p_expression_string','mel_parser.py',493),
  ('expression -> NAME','expression',1,'p_expression_name','mel_parser.py',499),
  ('expression_name -> NAME','expression_name',1,'p_expression_name','mel_parser.py',500),
  ('var_type -> FLOAT_TYPE','var_type',1,'p_var_type','mel_parser.py',506),
  ('var_type -> INT_TYPE','var_type',1,'p_var_type','mel_parser.py',507),
  ('var_type -> STRING_TYPE','var_type',1,'p_var_type','mel_parser.py',508),
  ('var_type -> BOOL_TYPE','var_type',1,'p_var_type','mel_parser.py',509),
  ('empty -> <empty>','empty',0,'p_empty','mel_parser.py',515),
]
